#!/usr/bin/env python3
import sys
import os
import assembler
import tokenizer
if len(sys.argv) < 2: raise RuntimeError(f"Expected at least 2 arguments, received {len(sys.argv)}")

_in:  str = sys.argv[1]
if len(sys.argv) < 3:
    _out = "sbsout"
else:
    _out = sys.argv[2]

if _in.startswith("-"):
    raise RuntimeError(f"Cannot receive argument {_in} as output")
if _out.startswith("-"):
    raise RuntimeError(f"Cannot receive argument {_out} as output")
if (not os.path.isfile(_in)): raise RuntimeError(f"File \"{sys.argv[1]}\" does not exist")

(_in.split(".")[-1] != "sbs") and (print("WARNING: file extension is not .sbs (recommended for sabbahscipt)"))

code: str
with open(_in, 'r') as file: code = file.read()
tokenized: list[tokenizer.Token] = tokenizer.tokenize(code)
assembled: str                   = assembler.assemble(tokenized)
if os.path.isfile(_out):
    if not "--no-preserve-out" in sys.argv:
        print(f"fatal: output file already exists: \"{_out}\"")

ASM = _out + ".asm"
OBJ = _out + ".o"
with open(ASM, 'w') as out_asm:
    out_asm.write(assembled)
os.system(f"nasm -felf64 {ASM}")
os.system(f"ld {OBJ} -o {_out}")

if not "--no-clean" in sys.argv:
    os.system(f"rm {ASM}")
    os.system(f"rm {OBJ}")